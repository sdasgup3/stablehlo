stablehlo-opt stablehlo/testdata/random_randint_shape_int16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055f4e26b0e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055f4e26aef80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055f4e26b150a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f528f65af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f528f6a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f528f65aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f528f645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055f4e260f9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055f4e260f967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055f4e260f913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055f4e260e9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055f4e2607029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055f4e22aa3bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x000055f4e2298d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055f4e2294986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055f4e1e2dab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055f4e1e2da03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055f4e1e2d99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055f4e1f55a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/random_randint_shape_int16_5_4.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055ac8015ee67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055ac8015cf80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055ac8015f50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f7a39e5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f7a39ea9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f7a39e5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f7a39e45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055ac800bd9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055ac800bd967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055ac800bd913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055ac800bc9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055ac800b5029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055ac7fd583bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x000055ac7fd46d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055ac7fd42986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055ac7f8dbab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055ac7f8dba03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055ac7f8db99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055ac7fa03a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/random_randint_shape_int8_32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000563cd08a0e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000563cd089ef80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000563cd08a150a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fba7ba5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fba7baa9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fba7ba5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fba7ba45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000563cd07ff9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000563cd07ff967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000563cd07ff913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000563cd07fe9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000563cd07f7029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000563cd049a3bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x0000563cd0488d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000563cd0484986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000563cd001dab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000563cd001da03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000563cd001d99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000563cd0145a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/random_randint_shape_int8_5_4.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055693b6f7e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055693b6f5f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055693b6f850a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f883705af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f88370a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f883705aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f8837045472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055693b6569b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055693b656967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055693b656913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055693b6559ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055693b64e029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055693b2f13bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x000055693b2dfd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055693b2db986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055693ae74ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055693ae74a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055693ae7499d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055693af9ca77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/random_randint_shape_int8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000557679da4e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000557679da2f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000557679da550a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f8f1165af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f8f116a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f8f1165aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f8f11645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000557679d039b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000557679d03967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000557679d03913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000557679d029ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000557679cfb029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055767999e3bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x000055767998cd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000557679988986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000557679521ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000557679521a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055767952199d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000557679649a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/random_randint_shape_int16_32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055b8339a4e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055b8339a2f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055b8339a550a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fd6a165af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fd6a16a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fd6a165aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fd6a1645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055b8339039b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055b833903967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055b833903913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055b8339029ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055b8338fb029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055b83359e3bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x000055b83358cd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055b833588986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055b833121ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055b833121a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055b83312199d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055b833249a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_complex64.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x00005645fd0e0e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x00005645fd0def80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x00005645fd0e150a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f97c9e5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f97c9ea9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f97c9e5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f97c9e45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005645fd03f9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x00005645fd03f967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x00005645fd03fa93 std::variant_alternative<3ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<3ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005645fd03ea3d std::pair<llvm::APFloat, llvm::APFloat> const& std::get<std::pair<llvm::APFloat, llvm::APFloat>, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x00005645fd037169 mlir::stablehlo::Element::getComplexValue() const stablehlo/reference/Element.cpp:221:20
#12 0x00005645fccda682 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:306:23
#13 0x00005645fccc8d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x00005645fccc4986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x00005645fc85dab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x00005645fc85da03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x00005645fc85d99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005645fc985a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_int8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055db7942ce67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055db7942af80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055db7942d50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f242ec5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f242eca9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f242ec5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f242ec45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055db7938b9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055db7938b967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055db7938b913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055db7938a9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055db79383029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055db790262fe mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:239:34
#13 0x000055db79014d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055db79010986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055db78ba9ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055db78ba9a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055db78ba999d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055db78cd1a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_int16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055abad9a7e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055abad9a5f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055abad9a850a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f99e325af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f99e32a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f99e325aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f99e3245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055abad9069b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055abad906967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055abad906913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055abad9059ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055abad8fe029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055abad5a135c mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:246:35
#13 0x000055abad58fd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055abad58b986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055abad124ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055abad124a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055abad12499d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055abad24ca77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_float32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x00005653c9633e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x00005653c9631f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x00005653c963450a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fcc3965af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fcc396a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fcc3965aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fcc39645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005653c95929b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x00005653c9592967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x00005653c9592a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005653c9591a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x00005653c958a0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x00005653c922d231 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:220:26
#13 0x00005653c921bd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x00005653c9217986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x00005653c8db0ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x00005653c8db0a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x00005653c8db099d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005653c8ed8a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_float32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000555dff7a7e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000555dff7a5f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000555dff7a850a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fc7a485af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fc7a48a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fc7a485aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fc7a4845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000555dff7069b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000555dff706967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000555dff706a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000555dff705a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000555dff6fe0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000555dff3a1231 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:220:26
#13 0x0000555dff38fd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000555dff38b986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000555dfef24ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000555dfef24a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000555dfef2499d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000555dff04ca77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_uint32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000562ae1e4fe67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000562ae1e4df80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000562ae1e5050a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f8fb125af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f8fb12a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f8fb125aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f8fb1245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000562ae1dae9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000562ae1dae967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000562ae1dae913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000562ae1dad9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000562ae1da6029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000562ae1a4954e mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:282:36
#13 0x0000562ae1a37d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000562ae1a33986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000562ae15ccab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000562ae15cca03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000562ae15cc99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000562ae16f4a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_complex64.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055d4dc9d1e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055d4dc9cff80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055d4dc9d250a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fe0b825af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fe0b82a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fe0b825aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fe0b8245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055d4dc9309b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055d4dc930967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055d4dc930a93 std::variant_alternative<3ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<3ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055d4dc92fa3d std::pair<llvm::APFloat, llvm::APFloat> const& std::get<std::pair<llvm::APFloat, llvm::APFloat>, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055d4dc928169 mlir::stablehlo::Element::getComplexValue() const stablehlo/reference/Element.cpp:221:20
#12 0x000055d4dc5cb682 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:306:23
#13 0x000055d4dc5b9d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055d4dc5b5986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055d4dc14eab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055d4dc14ea03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055d4dc14e99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055d4dc276a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_float32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000560e554a4e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000560e554a2f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000560e554a550a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f159b65af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f159b6a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f159b65aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f159b645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000560e554039b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000560e55403967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000560e55403a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000560e55402a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000560e553fb0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000560e5509e231 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:220:26
#13 0x0000560e5508cd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000560e55088986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000560e54c21ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000560e54c21a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000560e54c2199d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000560e54d49a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_int16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055d262612e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055d262610f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055d26261350a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f50d6e5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f50d6ea9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f50d6e5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f50d6e45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055d2625719b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055d262571967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055d262571913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055d2625709ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055d262569029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055d26220c35c mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:246:35
#13 0x000055d2621fad57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055d2621f6986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055d261d8fab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055d261d8fa03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055d261d8f99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055d261eb7a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_float16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x00005630d9731e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x00005630d972ff80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x00005630d973250a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f090125af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f09012a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f090125aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f0901245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005630d96909b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x00005630d9690967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x00005630d9690a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005630d968fa0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x00005630d96880f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x00005630d932b1b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x00005630d9319d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x00005630d9315986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x00005630d8eaeab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x00005630d8eaea03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x00005630d8eae99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005630d8fd6a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_float16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x00005622651b0e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x00005622651aef80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x00005622651b150a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007ff37a05af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007ff37a0a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007ff37a05aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007ff37a045472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000056226510f9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000056226510f967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000056226510fa43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000056226510ea0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x00005622651070f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000562264daa1b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x0000562264d98d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000562264d94986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000056226492dab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000056226492da03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000056226492d99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000562264a55a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_bfloat16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000556e133b6e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000556e133b4f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000556e133b750a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fc0b1a5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fc0b1aa9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fc0b1a5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fc0b1a45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000556e133159b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000556e13315967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000556e13315a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000556e13314a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000556e1330d0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000556e12fb01b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x0000556e12f9ed57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000556e12f9a986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000556e12b33ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000556e12b33a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000556e12b3399d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000556e12c5ba77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_int32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055d6bfd01e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055d6bfcfff80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055d6bfd0250a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fc66185af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fc6618a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fc66185aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fc661845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055d6bfc609b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055d6bfc60967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055d6bfc60913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055d6bfc5f9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055d6bfc58029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055d6bf8fb3bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x000055d6bf8e9d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055d6bf8e5986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055d6bf47eab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055d6bf47ea03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055d6bf47e99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055d6bf5a6a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_complex64.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000564998dbce67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000564998dbaf80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000564998dbd50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f03a785af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f03a78a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f03a785aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f03a7845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000564998d1b9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000564998d1b967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000564998d1ba93 std::variant_alternative<3ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<3ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000564998d1aa3d std::pair<llvm::APFloat, llvm::APFloat> const& std::get<std::pair<llvm::APFloat, llvm::APFloat>, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000564998d13169 mlir::stablehlo::Element::getComplexValue() const stablehlo/reference/Element.cpp:221:20
#12 0x00005649989b6682 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:306:23
#13 0x00005649989a4d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x00005649989a0986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000564998539ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000564998539a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000056499853999d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000564998661a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_float16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000056490fcb7e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000056490fcb5f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000056490fcb850a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f5de0a5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f5de0aa9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f5de0a5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f5de0a45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000056490fc169b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000056490fc16967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000056490fc16a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000056490fc15a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000056490fc0e0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x000056490f8b11b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x000056490f89fd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000056490f89b986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000056490f434ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000056490f434a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000056490f43499d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000056490f55ca77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_float16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000560aea8d0e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000560aea8cef80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000560aea8d150a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f84c3c5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f84c3ca9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f84c3c5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f84c3c45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000560aea82f9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000560aea82f967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000560aea82fa43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000560aea82ea0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000560aea8270f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000560aea4ca1b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x0000560aea4b8d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000560aea4b4986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000560aea04dab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000560aea04da03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000560aea04d99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000560aea175a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_complex64.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055ba7c45ce67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055ba7c45af80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055ba7c45d50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f1a0d65af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f1a0d6a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f1a0d65aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f1a0d645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055ba7c3bb9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055ba7c3bb967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055ba7c3bba93 std::variant_alternative<3ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<3ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055ba7c3baa3d std::pair<llvm::APFloat, llvm::APFloat> const& std::get<std::pair<llvm::APFloat, llvm::APFloat>, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055ba7c3b3169 mlir::stablehlo::Element::getComplexValue() const stablehlo/reference/Element.cpp:221:20
#12 0x000055ba7c056682 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:306:23
#13 0x000055ba7c044d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055ba7c040986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055ba7bbd9ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055ba7bbd9a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055ba7bbd999d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055ba7bd01a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_uint16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000556149f21e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000556149f1ff80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000556149f2250a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f028585af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f02858a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f028585aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f0285845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000556149e809b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000556149e80967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000556149e80913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000556149e7f9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000556149e78029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000556149b1b4ee mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:275:36
#13 0x0000556149b09d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000556149b05986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055614969eab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055614969ea03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055614969e99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005561497c6a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_uint32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055c937896e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055c937894f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055c93789750a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fe161a5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fe161aa9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fe161a5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fe161a45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055c9377f59b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055c9377f5967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055c9377f5913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055c9377f49ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055c9377ed029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055c93749054e mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:282:36
#13 0x000055c93747ed57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055c93747a986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055c937013ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055c937013a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055c93701399d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055c93713ba77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_complex64.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055b5cd512e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055b5cd510f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055b5cd51350a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fed7e25af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fed7e2a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fed7e25aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fed7e245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055b5cd4719b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055b5cd471967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055b5cd471a93 std::variant_alternative<3ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<3ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055b5cd470a3d std::pair<llvm::APFloat, llvm::APFloat> const& std::get<std::pair<llvm::APFloat, llvm::APFloat>, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055b5cd469169 mlir::stablehlo::Element::getComplexValue() const stablehlo/reference/Element.cpp:221:20
#12 0x000055b5cd10c682 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:306:23
#13 0x000055b5cd0fad57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055b5cd0f6986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055b5ccc8fab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055b5ccc8fa03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055b5ccc8f99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055b5ccdb7a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_float16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x00005594e9413e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x00005594e9411f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x00005594e941450a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f706445af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f70644a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f706445aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f7064445472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005594e93729b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x00005594e9372967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x00005594e9372a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005594e9371a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x00005594e936a0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x00005594e900d1b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x00005594e8ffbd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x00005594e8ff7986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x00005594e8b90ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x00005594e8b90a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x00005594e8b9099d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005594e8cb8a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_int32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000563f8b543e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000563f8b541f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000563f8b54450a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f8cb885af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f8cb88a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f8cb885aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f8cb8845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000563f8b4a29b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000563f8b4a2967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000563f8b4a2913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000563f8b4a19ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000563f8b49a029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000563f8b13d3bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x0000563f8b12bd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000563f8b127986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000563f8acc0ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000563f8acc0a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000563f8acc099d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000563f8ade8a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_float16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055e2e881be67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055e2e8819f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055e2e881c50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f15e5a5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f15e5aa9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f15e5a5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f15e5a45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055e2e877a9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055e2e877a967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055e2e877aa43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055e2e8779a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055e2e87720f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x000055e2e84151b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x000055e2e8403d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055e2e83ff986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055e2e7f98ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055e2e7f98a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055e2e7f9899d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055e2e80c0a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_int32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000056414332ae67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000564143328f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000056414332b50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f148e85af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f148e8a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f148e85aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f148e845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005641432899b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000564143289967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000564143289913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005641432889ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000564143281029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000564142f243bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x0000564142f12d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000564142f0e986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000564142aa7ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000564142aa7a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000564142aa799d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000564142bcfa77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_int16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055ed9b2ede67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055ed9b2ebf80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055ed9b2ee50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fa473c5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fa473ca9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fa473c5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fa473c45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055ed9b24c9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055ed9b24c967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055ed9b24c913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055ed9b24b9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055ed9b244029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055ed9aee735c mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:246:35
#13 0x000055ed9aed5d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055ed9aed1986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055ed9aa6aab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055ed9aa6aa03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055ed9aa6a99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055ed9ab92a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_uint8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055b70efabe67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055b70efa9f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055b70efac50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f16b905af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f16b90a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f16b905aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f16b9045472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055b70ef0a9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055b70ef0a967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055b70ef0a913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055b70ef099ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055b70ef02029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055b70eba5490 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:268:35
#13 0x000055b70eb93d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055b70eb8f986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055b70e728ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055b70e728a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055b70e72899d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055b70e850a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_uint16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x00005582b1ac5e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x00005582b1ac3f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x00005582b1ac650a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fa33f65af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fa33f6a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fa33f65aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fa33f645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005582b1a249b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x00005582b1a24967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x00005582b1a24913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005582b1a239ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x00005582b1a1c029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x00005582b16bf4ee mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:275:36
#13 0x00005582b16add57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x00005582b16a9986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x00005582b1242ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x00005582b1242a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x00005582b124299d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005582b136aa77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_int8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000560a26910e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000560a2690ef80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000560a2691150a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fdff6e3af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fdff6e89ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fdff6e3aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fdff6e25472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000560a2686f9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000560a2686f967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000560a2686f913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000560a2686e9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000560a26867029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000560a2650a2fe mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:239:34
#13 0x0000560a264f8d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000560a264f4986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000560a2608dab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000560a2608da03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000560a2608d99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000560a261b5a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_uint8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000555f29c9fe67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000555f29c9df80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000555f29ca050a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f731285af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f73128a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f731285aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f7312845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000555f29bfe9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000555f29bfe967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000555f29bfe913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000555f29bfd9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000555f29bf6029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000555f29899490 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:268:35
#13 0x0000555f29887d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000555f29883986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000555f2941cab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000555f2941ca03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000555f2941c99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000555f29544a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_bfloat16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000056240f2d0e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000056240f2cef80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000056240f2d150a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f72e1c5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f72e1ca9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f72e1c5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f72e1c45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000056240f22f9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000056240f22f967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000056240f22fa43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000056240f22ea0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000056240f2270f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x000056240eeca1b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x000056240eeb8d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000056240eeb4986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000056240ea4dab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000056240ea4da03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000056240ea4d99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000056240eb75a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_uint16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055e1c1057e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055e1c1055f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055e1c105850a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fdee2e5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fdee2ea9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fdee2e5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fdee2e45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055e1c0fb69b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055e1c0fb6967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055e1c0fb6913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055e1c0fb59ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055e1c0fae029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055e1c0c514ee mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:275:36
#13 0x000055e1c0c3fd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055e1c0c3b986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055e1c07d4ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055e1c07d4a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055e1c07d499d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055e1c08fca77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_uint16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055db5792ae67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055db57928f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055db5792b50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fc3e8a5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fc3e8aa9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fc3e8a5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fc3e8a45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055db578899b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055db57889967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055db57889913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055db578889ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055db57881029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055db575244ee mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:275:36
#13 0x000055db57512d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055db5750e986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055db570a7ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055db570a7a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055db570a799d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055db571cfa77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_uint8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055765583ce67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055765583af80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055765583d50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f065ec5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f065eca9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f065ec5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f065ec45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055765579b9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055765579b967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055765579b913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055765579a9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000557655793029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000557655436490 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:268:35
#13 0x0000557655424d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000557655420986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000557654fb9ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000557654fb9a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000557654fb999d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005576550e1a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_int32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055bacdebee67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055bacdebcf80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055bacdebf50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f7915e5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f7915ea9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f7915e5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f7915e45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055bacde1d9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055bacde1d967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055bacde1d913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055bacde1c9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055bacde15029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055bacdab83bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x000055bacdaa6d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055bacdaa2986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055bacd63bab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055bacd63ba03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055bacd63b99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055bacd763a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_float32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000563091089e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000563091087f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000056309108a50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f5be803af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f5be8089ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f5be803aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f5be8025472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000563090fe89b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000563090fe8967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000563090fe8a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000563090fe7a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000563090fe00f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000563090c83231 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:220:26
#13 0x0000563090c71d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000563090c6d986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000563090806ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000563090806a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000056309080699d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000056309092ea77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_uint32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055eecd32de67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055eecd32bf80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055eecd32e50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fe71483af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fe714889ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fe71483aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fe714825472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055eecd28c9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055eecd28c967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055eecd28c913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055eecd28b9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055eecd284029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055eeccf2754e mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:282:36
#13 0x000055eeccf15d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055eeccf11986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055eeccaaaab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055eeccaaaa03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055eeccaaa99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055eeccbd2a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_int16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x00005585aa7efe67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x00005585aa7edf80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x00005585aa7f050a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fa74965af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fa7496a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fa74965aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fa749645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005585aa74e9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x00005585aa74e967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x00005585aa74e913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005585aa74d9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x00005585aa746029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x00005585aa3e935c mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:246:35
#13 0x00005585aa3d7d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x00005585aa3d3986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x00005585a9f6cab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x00005585a9f6ca03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x00005585a9f6c99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005585aa094a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_uint8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000561d6c7a2e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000561d6c7a0f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000561d6c7a350a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fea9525af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fea952a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fea9525aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fea95245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000561d6c7019b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000561d6c701967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000561d6c701913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000561d6c7009ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000561d6c6f9029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000561d6c39c490 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:268:35
#13 0x0000561d6c38ad57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000561d6c386986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000561d6bf1fab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000561d6bf1fa03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000561d6bf1f99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000561d6c047a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/gather_from_slicing_name___-1_-5_-200___enable_xla_True.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000561414129e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000561414127f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000056141412a50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f663665af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f66366a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f663665aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f6636645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005614140889b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000561414088967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000561414088913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005614140879ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000561414080029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000561413d233bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x0000561413d11d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000561413d0d986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x00005614138a6ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x00005614138a6a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x00005614138a699d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005614139cea77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_bfloat16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000565413f95e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000565413f93f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000565413f9650a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fc180a5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fc180aa9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fc180a5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fc180a45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000565413ef49b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000565413ef4967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000565413ef4a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000565413ef3a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000565413eec0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000565413b8f1b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x0000565413b7dd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000565413b79986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000565413712ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000565413712a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000056541371299d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000056541383aa77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_complex64.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055fec0d71e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055fec0d6ff80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055fec0d7250a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fa621c5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fa621ca9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fa621c5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fa621c45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055fec0cd09b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055fec0cd0967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055fec0cd0a93 std::variant_alternative<3ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<3ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055fec0ccfa3d std::pair<llvm::APFloat, llvm::APFloat> const& std::get<std::pair<llvm::APFloat, llvm::APFloat>, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055fec0cc8169 mlir::stablehlo::Element::getComplexValue() const stablehlo/reference/Element.cpp:221:20
#12 0x000055fec096b682 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:306:23
#13 0x000055fec0959d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055fec0955986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055fec04eeab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055fec04eea03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055fec04ee99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055fec0616a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint32_100_100__olddtype_uint32_newdtype_int32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x00005625e9d70e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x00005625e9d6ef80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x00005625e9d7150a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f98e125af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f98e12a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f98e125aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f98e1245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x00005625e9ccf9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x00005625e9ccf967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x00005625e9ccf913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005625e9cce9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x00005625e9cc7029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x00005625e996a3bc mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:253:35
#13 0x00005625e9958d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x00005625e9954986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x00005625e94edab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x00005625e94eda03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x00005625e94ed99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x00005625e9615a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_int8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055d902fc9e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055d902fc7f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055d902fca50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f56d1c5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f56d1ca9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f56d1c5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f56d1c45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055d902f289b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055d902f28967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055d902f28913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055d902f279ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055d902f20029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055d902bc32fe mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:239:34
#13 0x000055d902bb1d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055d902bad986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055d902746ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055d902746a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055d90274699d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055d90286ea77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_int16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055dfd50d1e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055dfd50cff80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055dfd50d250a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f273205af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f27320a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f273205aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f2732045472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055dfd50309b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055dfd5030967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055dfd5030913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055dfd502f9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055dfd5028029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055dfd4ccb35c mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:246:35
#13 0x000055dfd4cb9d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055dfd4cb5986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055dfd484eab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055dfd484ea03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055dfd484e99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055dfd4976a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_uint32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055579430be67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000555794309f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055579430c50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f8c76e5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f8c76ea9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f8c76e5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f8c76e45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055579426a9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055579426a967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055579426a913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x00005557942699ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000555794262029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x0000555793f0554e mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:282:36
#13 0x0000555793ef3d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000555793eef986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000555793a88ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000555793a88a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000555793a8899d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000555793bb0a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_uint32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055e6d1668e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055e6d1666f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055e6d166950a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fcf0b85af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fcf0b8a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fcf0b85aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fcf0b845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055e6d15c79b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055e6d15c7967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055e6d15c7913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055e6d15c69ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055e6d15bf029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055e6d126254e mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:282:36
#13 0x000055e6d1250d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055e6d124c986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055e6d0de5ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055e6d0de5a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055e6d0de599d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055e6d0f0da77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint8_100_100__olddtype_uint8_newdtype_bfloat16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055aded464e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055aded462f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055aded46550a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f73f885af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f73f88a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f73f885aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f73f8845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055aded3c39b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055aded3c3967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055aded3c3a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055aded3c2a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055aded3bb0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x000055aded05e1b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x000055aded04cd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055aded048986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055adecbe1ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055adecbe1a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055adecbe199d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055adecd09a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int32_100_100__olddtype_int32_newdtype_float32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000564d1cacee67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000564d1caccf80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000564d1cacf50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fbd75e5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fbd75ea9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fbd75e5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fbd75e45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000564d1ca2d9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000564d1ca2d967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000564d1ca2da43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000564d1ca2ca0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000564d1ca250f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000564d1c6c8231 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:220:26
#13 0x0000564d1c6b6d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000564d1c6b2986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000564d1c24bab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000564d1c24ba03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000564d1c24b99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000564d1c373a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_int8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055aea8bd1e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055aea8bcff80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055aea8bd250a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f25f8a5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f25f8aa9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f25f8a5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f25f8a45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055aea8b309b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055aea8b30967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055aea8b30913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055aea8b2f9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055aea8b28029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055aea87cb2fe mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:239:34
#13 0x000055aea87b9d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055aea87b5986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055aea834eab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055aea834ea03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055aea834e99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055aea8476a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_int8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055dec3c28e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055dec3c26f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055dec3c2950a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f888325af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f88832a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f888325aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f8883245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055dec3b879b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055dec3b87967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055dec3b87913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055dec3b869ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055dec3b7f029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055dec38222fe mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:239:34
#13 0x000055dec3810d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055dec380c986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055dec33a5ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055dec33a5a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055dec33a599d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055dec34cda77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_uint8.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055f745d3fe67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055f745d3df80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055f745d4050a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f590fe5af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f590fea9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f590fe5aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f590fe45472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055f745c9e9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055f745c9e967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055f745c9e913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055f745c9d9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055f745c96029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055f745939490 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:268:35
#13 0x000055f745927d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055f745923986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055f7454bcab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055f7454bca03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055f7454bc99d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055f7455e4a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_uint16_100_100__olddtype_uint16_newdtype_bfloat16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000557dca183e67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000557dca181f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000557dca18450a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007f4b4265af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007f4b426a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007f4b4265aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007f4b42645472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000557dca0e29b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000557dca0e2967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000557dca0e2a43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000557dca0e1a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000557dca0da0f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000557dc9d7d1b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x0000557dc9d6bd57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000557dc9d67986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000557dc9900ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000557dc9900a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000557dc990099d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000557dc9a28a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_uint16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055ea965fce67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055ea965faf80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055ea965fd50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fb9d025af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fb9d02a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fb9d025aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fb9d0245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055ea9655b9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055ea9655b967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055ea9655b913 std::variant_alternative<0ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<0ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055ea9655a9ad llvm::APInt const& std::get<llvm::APInt, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055ea96553029 mlir::stablehlo::Element::getIntegerValue() const stablehlo/reference/Element.cpp:200:10
#12 0x000055ea961f64ee mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:275:36
#13 0x000055ea961e4d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055ea961e0986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055ea95d79ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055ea95d79a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055ea95d7999d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055ea95ea1a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int8_100_100__olddtype_int8_newdtype_bfloat16.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x0000560a3c82be67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x0000560a3c829f80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x0000560a3c82c50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fe46a85af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fe46a8a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fe46a85aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fe46a845472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x0000560a3c78a9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x0000560a3c78a967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x0000560a3c78aa43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x0000560a3c789a0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x0000560a3c7820f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x0000560a3c4251b7 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:213:36
#13 0x0000560a3c413d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x0000560a3c40f986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x0000560a3bfa8ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x0000560a3bfa8a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x0000560a3bfa899d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x0000560a3c0d0a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13


stablehlo-opt stablehlo/testdata/convert_element_type_dtypes_to_dtypes_shape_int16_100_100__olddtype_int16_newdtype_float32.mlir.0_9_0.bc --vhlo-to-version=target=current --vhlo-legalize-to-stablehlo -inline | stablehlo-interpreter --interpret

PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: stablehlo-interpreter --interpret
 #0 0x000055a18dc8ce67 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:567:13
 #1 0x000055a18dc8af80 llvm::sys::RunSignalHandlers() /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Signals.cpp:105:18
 #2 0x000055a18dc8d50a SignalHandler(int) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/lib/Support/Unix/Signals.inc:412:1
 #3 0x00007fb96725af90 (/lib/x86_64-linux-gnu/libc.so.6+0x3bf90)
 #4 0x00007fb9672a9ccc __pthread_kill_implementation ./nptl/./nptl/pthread_kill.c:44:76
 #5 0x00007fb96725aef2 raise ./signal/../sysdeps/posix/raise.c:27:6
 #6 0x00007fb967245472 abort ./stdlib/./stdlib/abort.c:81:7
 #7 0x000055a18dbeb9b1 (stablehlo-interpreter+0xbfb9b1)
 #8 0x000055a18dbeb967 std::__throw_bad_variant_access(bool) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1333:3
 #9 0x000055a18dbeba43 std::variant_alternative<2ul, std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > >::type const& std::get<2ul, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1712:46
#10 0x000055a18dbeaa0d llvm::APFloat const& std::get<llvm::APFloat, llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> >(std::variant<llvm::APInt, bool, llvm::APFloat, std::pair<llvm::APFloat, llvm::APFloat> > const&) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:1149:7
#11 0x000055a18dbe30f9 mlir::stablehlo::Element::getFloatValue() const stablehlo/reference/Element.cpp:214:10
#12 0x000055a18d886231 mlir::stablehlo::Tensor::set(mlir::stablehlo::Sizes const&, mlir::stablehlo::Element const&) stablehlo/reference/Tensor.cpp:220:26
#13 0x000055a18d874d57 mlir::stablehlo::evalConvertOp(mlir::stablehlo::Tensor const&, mlir::TensorType) stablehlo/reference/Ops.cpp:131:5
#14 0x000055a18d870986 mlir::stablehlo::eval(mlir::Region&, llvm::ArrayRef<mlir::stablehlo::Tensor>, mlir::stablehlo::Scope*, llvm::function_ref<llvm::Error (mlir::Operation&, mlir::stablehlo::Scope&)>) stablehlo/reference/Ops.cpp:487:17
#15 0x000055a18d409ab4 mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)::operator()(mlir::func::FuncOp) const stablehlo/tools/StablehloInterpreterMain.cpp:118:29
#16 0x000055a18d409a03 std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/include/mlir/IR/Visitors.h:261:14
#17 0x000055a18d40999d mlir::WalkResult llvm::function_ref<mlir::WalkResult (mlir::Operation*)>::callback_fn<std::enable_if<(!(llvm::is_one_of<mlir::func::FuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value)) && (std::is_same<mlir::WalkResult, mlir::WalkResult>::value), mlir::WalkResult>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp), mlir::func::FuncOp, mlir::WalkResult>(mlir::Operation*, mlir::$_1::operator()(mlir::ModuleOp, llvm::raw_ostream&) const::'lambda'(mlir::func::FuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /usr/local/google/home/gleasonk/Coding/llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#18 0x000055a18d531a77 mlir::WalkResult mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<mlir::WalkResult (mlir::Operation*)>, mlir::WalkOrder) /usr/local/google/home/gleasonk/Coding/llvm-project/mlir/lib/IR/Visitors.cpp:0:13
